import { params, conditionType, sqlColumns } from './../typescript/types';
import { Client } from 'pg';

export const client = new Client({
    database:process.env.POSTGRESDBNAME,
    password:process.env.POSTGRESDBPASSWORD,
    port:5432,
    host:'localhost',
    user:'postgres',
})

class ORM {
    static readonly STRING:string = 'VARCHAR'
    static readonly INTEGER:string = 'INTEGER'
    static readonly FLOAT:string = 'FLOAT'
    static readonly BOOLEAN:string = 'BOOLEAN'
    constructor(
        private TABLENAME:string,
        private columns:any,
        private params:params = { force:false, logging:false },
    ){
        try {
            const array:Array<string[]> = Object.entries(columns)
            // @ts-ignore
            this.columns = array.map(elem => ({columnName:elem[0], type:elem[1]}))
            if (params.force) {
                client.query(`DROP TABLE ${TABLENAME}`) 
                let str = ''
                this.columns.forEach((elem:sqlColumns, i:number, array) => {
                    const column = `${elem.columnName} ${elem.type} NOT NULL${i === array.length - 1 ? '' : ','}\n`
                    str += `${column}`
                })
                const SQLQuery:string = `CREATE TABLE ${TABLENAME} (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    ${str}
                );`
                this.params.logging ? console.log(SQLQuery) : null
                client.query(SQLQuery).catch(err => console.log(err))
            }
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

    async findAll(condition?:conditionType) {
        try {
            if(!condition){
                const SQLQuery = `SELECT * FROM ${this.TABLENAME}` 
                return await (await client.query(SQLQuery)).rows
            }
            if(typeof condition.where === 'string') {
                const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE ${condition.where}`
                return await (await client.query(SQLQuery)).rows
            }
            let values = ''
            const array = Object.entries(condition.where)
            if(array.length - 1 === 0){
                array.forEach(elem => {
                    values += `${elem[0]} = '${elem[1]}'`
                })
                const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE ${values};`
                this.params.logging ? console.log(SQLQuery) : null
                return await (await client.query(SQLQuery)).rows
            }
            array.forEach((elem, i, array) => {
                values += `${elem[0]} = '${elem[1]}' ${i === array.length - 1 ? '' : 'AND'} `
            })
            const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE (${values});`
            this.params.logging ? console.log(SQLQuery) : null
            return await (await client.query(SQLQuery)).rows
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

    async findOne(condition:conditionType) {
        try {
            const [ data ] = await this.findAll(condition)
            return data
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    } 

    async insert(args) {
        try {
            let columns:string = '';
            let values = ''
            Object.entries(args).forEach((elem, i, array) => {
                columns += `${elem[0]}${array.length - 1 === i ? '' : ','} `
                values += `'${elem[1]}'${array.length - 1 === i ? '' : ','} `
                console.log(elem)
            })
            const SQLQuery = `INSERT INTO ${this.TABLENAME} (${columns}) VALUES (${values});`
            this.params.logging ? console.log(SQLQuery) : null
            const data = await client.query(SQLQuery)
            console.log(data)
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

    async update(args, condition:conditionType) {
        try {
            let values = ''
            Object.entries(args).forEach((elem, i, array) => {
                values += `${elem[0]} = '${elem[1]}'${i === array.length - 1 ? '' : ','} `
            })
            let conditions = ''
            const array = Object.entries(condition.where)
            if(array.length - 1 === 0) {
                if (typeof condition.where === 'string') {
                    const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values} WHERE ${condition.where}`
                    this.params.logging ? console.log(SQLQuery) : null
                    return await client.query(SQLQuery)
                }
                array.forEach(elem => {
                    conditions += `${elem[0]} = '${elem[1]}'`
                })
                const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values} WHERE ${conditions}`
                this.params.logging ? console.log(SQLQuery) : null
                return await client.query(SQLQuery)
            }
            if(typeof condition.where === 'string') {
                const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values} WHERE ${condition.where}`    
                this.params.logging ? console.log(SQLQuery) : null
                return await client.query(SQLQuery)
            }
            array.forEach((elem, i, array) => {
                conditions += `${elem[0]} = '${elem[1]}' ${i === array.length - 1 ? '' : 'AND'} `
            })
            const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values} WHERE ${conditions}`
            this.params.logging ? console.log(SQLQuery) : null
            return await client.query(SQLQuery)
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

    async delete(condition:conditionType){
        try {
            if(typeof condition.where === 'string') {
                const SQLQuery = `DELET FROM ${this.TABLENAME} WHERE ${condition.where}`
                await client.query(SQLQuery)    
            }
            let conditions = ''
            Object.entries(condition.where).forEach((elem, i, array) => {
                conditions += `${elem[0]} = '${elem[1]}' ${i === array.length - 1 ? '' : 'AND'} `
            })
            const SQLQuery = `DELET FROM ${this.TABLENAME} WHERE ${conditions}`
            await client.query(SQLQuery)
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

}

// export const physicalPersons = new ORM('physicalPersons', {
//     name:ORM.STRING,
//     surname:ORM.STRING,
    
// }, {force:false, logging:true})

export const legalPersons = new ORM('legalPersons', {
    column1:ORM.STRING
}, {force:true, logging:false})
