require('dotenv').config();
import { params, conditionType, sqlColumns } from './../typescript/types';
import { Client } from 'pg';

export const client = new Client({
    database:process.env.POSTGRESDBNAME,
    password:process.env.POSTGRESDBPASSWORD,
    port:5432,
    host:'localhost',
    user:'postgres',
})

client.connect()

class ORM {
    static readonly STRING:string = 'VARCHAR'
    static readonly INTEGER:string = 'INTEGER'
    static readonly FLOAT:string = 'FLOAT'
    static readonly BOOLEAN:string = 'BOOLEAN'
    constructor(
        private TABLENAME:string,
        private columns:any,
        private params:params = { force:false, logging:false },
    ){
        try {
            const array:Array<string[]> = Object.entries(columns)
            let arr = []
            for (let i:number = 0; i < array.length; i++) {
                arr = [...arr, {columnName:array[i][0], type:array[i][1]}]
            };
            this.columns = arr
            if (params.force) {
                client.query(`DROP TABLE ${TABLENAME}`) 
                let str = ''
                for (let i:number = 0; i < this.columns.length; i++) {
                    str += `${this.columns[i].columnName} ${this.columns[i].type} NOT NULL, ` 
                };
                const SQLQuery:string = `CREATE TABLE ${TABLENAME} (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ${str.slice(0, str.length - 2)});`
                client.query(SQLQuery).catch(err => console.log(err))
                this.params.logging ? console.log(SQLQuery) : null
            }
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

    async findAll(condition?:conditionType) {
        try {
            if(!condition){
                const SQLQuery = `SELECT * FROM ${this.TABLENAME};` 
                return (await client.query(SQLQuery)).rows
            }
            if(typeof condition.where === 'string') {
                const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE ${condition.where};`
                return (await client.query(SQLQuery)).rows
            }
            let values = ''
            const array = Object.entries(condition.where)
            if(array.length - 1 === 0){
                for (let i:number = 0; i < array.length; i++) {
                    values += `${array[i][0]} = '${array[i][1]}'`
                };
                const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE ${values};`
                this.params.logging ? console.log(SQLQuery) : null
                return (await client.query(SQLQuery)).rows
            }
            for (let i:number = 0; i < array.length; i++) {
                values += `${array[i][0]} = '${array[i][1]}' AND `
            };
            const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE (${values.slice(0, values.length - 5)});`
            this.params.logging ? console.log(SQLQuery) : null
            return (await client.query(SQLQuery)).rows
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

    async findOne(condition:conditionType) {
        try {
            const [ data ] = await this.findAll(condition)
            return data
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    } 

    async insert(args) {
        try {
            let columns:string = '';
            let values = ''
            const arr = Object.entries(args)
            for (let i:number = 0; i < arr.length; i++) {
                columns += `${arr[i][0]}, `
                values += `'${arr[i][1]}', `
            };
            const SQLQuery = `INSERT INTO ${this.TABLENAME} (${columns.slice(0, columns.length - 2)}) VALUES (${values.slice(0, values.length - 2)});`
            this.params.logging ? console.log(SQLQuery) : null
            await client.query(SQLQuery)
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

    async update(args, condition:conditionType) {
        try {
            let values = ''
            const arr = Object.entries(args)
            for (let i:number = 0; i < arr.length; i++) {
                values += `${arr[i][0]} = '${arr[i][1]}', `
            };
            let conditions = ''
            const array = Object.entries(condition.where)
            if(array.length === 1) {
                if (typeof condition.where === 'string') {
                    const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values.slice(0, values.length - 2)} WHERE ${condition.where};`
                    this.params.logging ? console.log(SQLQuery) : null
                    return await client.query(SQLQuery)
                }
                for (let i:number = 0; i < array.length; i++) {
                    conditions += `${array[i][0]} = '${array[i][1]}'`
                };
                const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values.slice(0, values.length - 2)} WHERE ${conditions};`
                this.params.logging ? console.log(SQLQuery) : null
                return await client.query(SQLQuery)
            }
            if(typeof condition.where === 'string') {
                const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values.slice(0, values.length - 2)} WHERE ${condition.where};`    
                this.params.logging ? console.log(SQLQuery) : null
                return await client.query(SQLQuery)
            }
            for (let i:number = 0; i < array.length; i++) {
                conditions += `${array[i][0]} = '${array[i][1]}' AND `
            };
            const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values.slice(0, values.length - 2)} WHERE ${conditions.slice(0, conditions.length - 5)};`
            this.params.logging ? console.log(SQLQuery) : null
            return await client.query(SQLQuery)
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

    async delete(condition:conditionType){
        try {
            if(typeof condition.where === 'string') {
                const SQLQuery = `DELETE FROM ${this.TABLENAME} WHERE ${condition.where};`
                await client.query(SQLQuery)    
            }
            let conditions = ''
            const array = Object.entries(condition.where) 
            for (let i:number = 0; i < array.length; i++) {
                conditions += `${array[i][0]} = '${array[i][1]}' AND `
            };
            const SQLQuery = `DELETE FROM ${this.TABLENAME} WHERE ${conditions.slice(0, conditions.length - 5)};`
            this.params.logging ? console.log(SQLQuery) : null
            await client.query(SQLQuery)
        } catch(err) {
            this.params.logging ? console.log(err) : null
            return err
        }
    }

}

export const Table = new ORM('Table2', {
    column1:ORM.STRING,
    column2:ORM.BOOLEAN,
}, {force:false, logging:true})

// Table.findAll({where:{column1:"ok",column2:12}}).then(res => console.log(res))
// Table.findAll({where:"column2 < 10"})
// Table.findOne({where:{column1:"ok"}})
// Table.findOne({where:"id == 2"})
// Table.insert({column1:"insert test", column2:true})
// Table.update({column1:"update test", column2:10}, {where:"id = 2"})
// Table.update({column1:"update test", column2:false}, {where:{column2:true, column1:"update test"}})
// Table.delete({where:{column2:true, column1:'insert test'}})
// Table.delete({where:'column2 = 10'})