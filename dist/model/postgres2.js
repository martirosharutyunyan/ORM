"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = exports.client = void 0;
require('dotenv').config();
const pg_1 = require("pg");
console.log(process.env.POSTGRESDBNAME, process.env.POSTGRESDBPASSWORD);
exports.client = new pg_1.Client({
    database: process.env.POSTGRESDBNAME,
    password: process.env.POSTGRESDBPASSWORD,
    port: 5432,
    host: 'localhost',
    user: 'postgres',
});
class ORM {
    constructor(TABLENAME, columns, params = { force: false, logging: false }) {
        this.TABLENAME = TABLENAME;
        this.columns = columns;
        this.params = params;
        try {
            const array = Object.entries(columns);
            let arr = [];
            for (let i = 0; i < array.length; i++) {
                arr = [...arr, { columnName: array[i][0], type: array[i][1] }];
            }
            ;
            this.columns = arr;
            if (params.force) {
                exports.client.query(`DROP TABLE ${TABLENAME}`);
                let str = '';
                for (let i = 0; i < this.columns.length; i++) {
                    str += `${this.columns[i].columnName} ${this.columns[i].type} NOT NULL, `;
                }
                ;
                const SQLQuery = `CREATE TABLE ${TABLENAME} (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ${str.slice(0, str.length - 2)});`;
                exports.client.query(SQLQuery).catch(err => console.log(err));
                this.params.logging ? console.log(SQLQuery) : null;
            }
        }
        catch (err) {
            this.params.logging ? console.log(err) : null;
            return err;
        }
    }
    findAll(condition) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!condition) {
                    const SQLQuery = `SELECT * FROM ${this.TABLENAME}`;
                    return yield (yield exports.client.query(SQLQuery)).rows;
                }
                if (typeof condition.where === 'string') {
                    const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE ${condition.where}`;
                    return yield (yield exports.client.query(SQLQuery)).rows;
                }
                let values = '';
                const array = Object.entries(condition.where);
                if (array.length - 1 === 0) {
                    for (let i = 0; i < array.length; i++) {
                        values += `${array[i][0]} = '${array[i][1]}'`;
                    }
                    ;
                    const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE ${values};`;
                    this.params.logging ? console.log(SQLQuery) : null;
                    return yield (yield exports.client.query(SQLQuery)).rows;
                }
                for (let i = 0; i < array.length; i++) {
                    values += `${array[i][0]} = '${array[i][1]}' AND `;
                }
                ;
                const SQLQuery = `SELECT * FROM ${this.TABLENAME} WHERE (${values.slice(0, values.length - 5)});`;
                this.params.logging ? console.log(SQLQuery) : null;
                const data = (yield exports.client.query(SQLQuery)).rows;
                console.log(data);
            }
            catch (err) {
                this.params.logging ? console.log(err) : null;
                return err;
            }
        });
    }
    findOne(condition) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const [data] = yield this.findAll(condition);
                return data;
            }
            catch (err) {
                this.params.logging ? console.log(err) : null;
                return err;
            }
        });
    }
    insert(args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let columns = '';
                let values = '';
                Object.entries(args).forEach((elem, i, array) => {
                    columns += `${elem[0]}${array.length - 1 === i ? '' : ','} `;
                    values += `'${elem[1]}'${array.length - 1 === i ? '' : ','} `;
                    console.log(elem);
                });
                const SQLQuery = `INSERT INTO ${this.TABLENAME} (${columns}) VALUES (${values});`;
                this.params.logging ? console.log(SQLQuery) : null;
                const data = yield exports.client.query(SQLQuery);
                console.log(data);
            }
            catch (err) {
                this.params.logging ? console.log(err) : null;
                return err;
            }
        });
    }
    update(args, condition) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let values = '';
                Object.entries(args).forEach((elem, i, array) => {
                    values += `${elem[0]} = '${elem[1]}'${i === array.length - 1 ? '' : ','} `;
                });
                let conditions = '';
                const array = Object.entries(condition.where);
                if (array.length - 1 === 0) {
                    if (typeof condition.where === 'string') {
                        const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values} WHERE ${condition.where}`;
                        this.params.logging ? console.log(SQLQuery) : null;
                        return yield exports.client.query(SQLQuery);
                    }
                    array.forEach(elem => {
                        conditions += `${elem[0]} = '${elem[1]}'`;
                    });
                    const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values} WHERE ${conditions}`;
                    this.params.logging ? console.log(SQLQuery) : null;
                    return yield exports.client.query(SQLQuery);
                }
                if (typeof condition.where === 'string') {
                    const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values} WHERE ${condition.where}`;
                    this.params.logging ? console.log(SQLQuery) : null;
                    return yield exports.client.query(SQLQuery);
                }
                array.forEach((elem, i, array) => {
                    conditions += `${elem[0]} = '${elem[1]}' ${i === array.length - 1 ? '' : 'AND'} `;
                });
                const SQLQuery = `UPDATE ${this.TABLENAME} SET ${values} WHERE ${conditions}`;
                this.params.logging ? console.log(SQLQuery) : null;
                return yield exports.client.query(SQLQuery);
            }
            catch (err) {
                this.params.logging ? console.log(err) : null;
                return err;
            }
        });
    }
    delete(condition) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (typeof condition.where === 'string') {
                    const SQLQuery = `DELET FROM ${this.TABLENAME} WHERE ${condition.where}`;
                    yield exports.client.query(SQLQuery);
                }
                let conditions = '';
                Object.entries(condition.where).forEach((elem, i, array) => {
                    conditions += `${elem[0]} = '${elem[1]}' ${i === array.length - 1 ? '' : 'AND'} `;
                });
                const SQLQuery = `DELET FROM ${this.TABLENAME} WHERE ${conditions}`;
                yield exports.client.query(SQLQuery);
            }
            catch (err) {
                this.params.logging ? console.log(err) : null;
                return err;
            }
        });
    }
}
ORM.STRING = 'VARCHAR';
ORM.INTEGER = 'INTEGER';
ORM.FLOAT = 'FLOAT';
ORM.BOOLEAN = 'BOOLEAN';
exports.Table = new ORM('Table2', {
    column1: ORM.STRING,
    column2: ORM.INTEGER,
}, { force: true, logging: true });
exports.Table.findAll({ where: { column1: "ok", column2: 12 } }).then(res => console.log(res));
// Table.findAll({where:"column2 < 10"})
// Table.findOne({where:{column1:"ok"}})
// Table.findOne({where:"id == 2"})
// Table.insert({column1:"insert test", column2:321})
// Table.update({column1:"update test", column2:10}, {where:"id = 2"})
// Table.update({column1:"update test", column2:10}, {where:{column2:10}})
// Table.delete({where:{column2:10}})
// Table.delete({where:'column2 = 10'})
//# sourceMappingURL=postgres2.js.map